<?php declare(strict_types=1);

namespace PhilippR\Atk4\File;

use Atk4\Data\Exception;
use Atk4\Data\Model;
use PhilippR\Atk4\ModelTraits\CryptIdTrait;
use PhilippR\Atk4\SecondaryModel\SecondaryModel;


abstract class File extends SecondaryModel
{

    use CryptIdTrait;

    public $table = 'file';

    protected function init(): void
    {
        parent::init();
        $this->addFileFields();
        $this->addCryptIdFieldAndHooks('crypt_id');
        $this->addHooks();
    }

    protected function addFileFields(): void
    {
        //filename
        $this->addField('filename');

        //the relative path, usually to the file project main dir, e.g. output/images/
        $this->addField('relative_path');

        //pdf, jpg etc
        $this->addField('filetype');

        //extra field to further classify file if needed, e.g. "ATTACHMENT", "TEMPORARY"
        $this->addField('type');

        //can be used to indicate e.g. if the file was generated by script or uploaded by user. Define constants to your application's needs.
        $this->addField('origin');

        $this->addField('sort');
    }

    protected function addHooks(): void
    {
        //if physical file does not exist anymore, delete DB record, too
        $this->onHook(
            Model::HOOK_AFTER_LOAD,
            function (self $fileEntity) {
                if ($fileEntity->checkFileExists()) {
                    return;
                }
                $fileEntity->delete();
                $fileEntity->breakHook(false);
            }
        );

        $this->onHook(
            Model::HOOK_BEFORE_SAVE,
            function (self $fileEntity) {
                //If file does not exist, don't save this in DB
                if (!$fileEntity->checkFileExists()) {
                    throw new Exception('The file to be saved does not exist: ' . $this->getFullFilePath());
                }
            }
        );

        //after successful delete of DB record, delete physical file as well
        $this->onHook(
            Model::HOOK_AFTER_DELETE,
            function (self $fileEntity) {
                $fileEntity->deleteFile();
            }
        );
    }


    protected function generateCryptId(): string
    {
        $return = '';
        for ($i = 0; $i < 21; $i++) {
            $return .= $this->getRandomChar();
        }

        return $return;
    }

    protected function deleteFile(): bool
    {
        if (file_exists($this->getFullFilePath())) {
            return unlink($this->getFullFilePath());
        }
        return false;
    }

    public function getFullFilePath(): string
    {
        return FileController::getBaseDir() . $this->get('relative_path') . $this->get('filename');
    }

    public function checkFileExists(): bool
    {
        return (
            file_exists($this->getFullFilePath())
            && is_file($this->getFullFilePath())
        );
    }

}
