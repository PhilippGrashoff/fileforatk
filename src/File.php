<?php declare(strict_types=1);

namespace PhilippR\Atk4\File;

use Atk4\Data\Exception;
use Atk4\Data\Model;
use PhilippR\Atk4\ModelTraits\CryptIdTrait;
use PhilippR\Atk4\SecondaryModel\SecondaryModel;


abstract class File extends SecondaryModel
{

    use CryptIdTrait;

    public $table = 'file';

    protected function init(): void
    {
        parent::init();
        $this->addFileFields();
        $this->addCryptIdFieldAndHooks('crypt_id');
        $this->addHooks();
    }

    protected function addFileFields(): void
    {
        //filename
        $this->addField('filename');

        //the relative path to the file project main dir, e.g. output/images/
        $this->addField('relative_path');

        //pdf, jpg etc
        $this->addField('filetype');

        //extra field to further classify file if needed, e.g. "ATTACHMENT", "TEMPORARY"
        $this->addField('type');

        //can be used to indicate e.g. if the file was generated by Script or uploaded by user. Define constants to your application's needs.
        $this->addField('origin');

        $this->addField('sort');
    }

    protected function addHooks(): void
    {
        //if physical file does not exist anymore, delete DB record, too
        $this->onHook(
            Model::HOOK_AFTER_LOAD,
            function (self $fileEntity) {
                if ($fileEntity->checkFileExists()) {
                    return;
                }
                $fileEntity->delete();
                $fileEntity->breakHook(false);
            }
        );

        //set path to standard if defined
        $this->onHook(
            Model::HOOK_BEFORE_SAVE,
            function (self $fileEntity) {
                if (
                    empty($fileEntity->get('relative_path'))
                ) {
                    $fileEntity->set('relative_path', $fileEntity->getDefaultRelativePath());
                }
            }
        );

        $this->onHook(
            Model::HOOK_BEFORE_SAVE,
            function (self $fileEntity, bool $isUpdate) {
                $fileEntity->addDirectorySeparatorToRelativePath();
                //If file does not exist, don't save this in DB
                if (!$fileEntity->checkFileExists()) {
                    throw new Exception('The file to be saved does not exist: ' . $this->getFullFilePath());
                }

                //add filetype if not there
                if (
                    !$fileEntity->get('filetype')
                    && $fileEntity->get('filename')
                ) {
                    $fileEntity->set('filetype', pathinfo($fileEntity->get('filename'), PATHINFO_EXTENSION));
                }
            }
        );

        //after successful delete of DB record, delete physical file as well
        $this->onHook(
            Model::HOOK_AFTER_DELETE,
            function (self $fileEntity) {
                $fileEntity->deleteFile();
            }
        );
    }


    protected function generateCryptId(): string
    {
        $return = '';
        for ($i = 0; $i < 21; $i++) {
            $return .= $this->getRandomChar();
        }

        return $return;
    }

    public function deleteFile(): bool
    {
        if (file_exists($this->getFullFilePath())) {
            return unlink($this->getFullFilePath());
        }
        return false;
    }

    public function setFileName(string $name): void
    {
        $this->set('filename', SafeFileName::createSafeFileName($name));
        $this->set('filetype', pathinfo($name, PATHINFO_EXTENSION));

        $currentName = $this->get('filename');
        $i = 1;
        while (file_exists($this->getFullFilePath())) {
            $this->set(
                'filename',
                pathinfo($currentName, PATHINFO_FILENAME) . '_' . $i .
                ($this->get('filetype') ? '.' . $this->get('filetype') : '')
            );
            $i++;
        }
    }

    /**
     * Uses $_FILES array content to call move_uploaded_file
     */
    /*public function uploadFile(array $f): void
    {
        $this->createFileName($f['name']);

        if (!move_uploaded_file($f['tmp_name'], $this->getFullFilePath())) {
            throw new UserException('Die Datei konnte nicht hochgeladen werden.');
        }
    }*/

    public function getFullFilePath(): string
    {
        return $this->getBaseDir() . $this->addDirectorySeparatorToRelativePath() . $this->get('filename');
    }

    abstract protected  function getBaseDir(): string;

    abstract protected  function getDefaultRelativePath(): string;

    public function checkFileExists(): bool
    {
        return (
            file_exists($this->getFullFilePath())
            && is_file($this->getFullFilePath())
        );
    }

    //TODO bool is crap, raise exception if file save failed
    public function saveStringToFile(string $string): void
    {
        if (!$this->get('filename')) {
            $this->setFileName('UnnamedFile');
        }
        $result = file_put_contents($this->getFullFilePath(), $string);
        if($result === false) {
            throw new Exception('Unable to write to file: ' . $this->getFullFilePath());
        }
    }

    protected function addDirectorySeparatorToRelativePath(): string
    {
        if (
            $this->get('relative_path')
            && substr($this->get('relative_path'), -1) !== DIRECTORY_SEPARATOR
        ) {
            $this->set('relative_path', $this->get('relative_path') . DIRECTORY_SEPARATOR);
        }

        return (string)$this->get('relative_path');
    }
}
